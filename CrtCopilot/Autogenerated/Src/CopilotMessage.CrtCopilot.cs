namespace Terrasoft.Configuration.Copilot
{
	using System;
	using System.Collections.Generic;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using Terrasoft.Enrichment.Interfaces.ChatCompletion;

	[DataContract]
	[Serializable]
	[DebuggerDisplay("Role = {Role}; Content = {Content}")]
	public class CopilotMessage
	{

		#region Constructors: Public

		public CopilotMessage() {}

		public CopilotMessage(string content, string role, string toolCallId = null) {
			Id = Guid.NewGuid();
			Content = content;
			Role = role;
			ToolCallId = toolCallId;
			CreatedOnTicks = DateTime.UtcNow.Ticks;
		}

		public CopilotMessage(ToolCall toolCall) : this(null, CopilotMessageRole.Assistant, toolCall.Id) {
			ToolCalls.Add(toolCall);
		}

		public CopilotMessage(ChatMessage completionMessage, bool skipToolCalls = false, Guid? intentId = null)
				:this(completionMessage.Content, completionMessage.Role, completionMessage.ToolCallId) {
			if (!skipToolCalls) {
				ToolCalls = completionMessage.ToolCalls.ToList();
			}
		}

		#endregion

		#region Properties: Public

		/// <summary>
		/// Message's identifier.
		/// </summary>
		[DataMember(Name = "id")]
		public Guid Id { get; set; }
		
		/// <summary>
		/// The ticks passed from created on date of the message.
		/// </summary>
		[DataMember(Name = "createdOnTicks")]
		public long CreatedOnTicks { get; set; }

		/// <summary>
		/// Created on date.
		/// </summary>
		public DateTime Date => new DateTime(CreatedOnTicks, DateTimeKind.Utc);

		/// <summary>
		/// The contents of the user message.
		/// </summary>
		[DataMember(Name = "content", IsRequired = true)]
		public string Content { get; set; }

		/// <summary>
		/// The role of the message author ('system', 'user', 'assistant', 'tool') 
		/// </summary>
		[DataMember(Name = "role", IsRequired = true)]
		public string Role { get; set; }

		/// <summary>
		/// Indicates that this messages describes the current context.
		/// </summary>
		public bool IsContext { get; set; }

		/// <summary>
		/// The tool calls generated by the model, such as function calls.
		/// </summary>
		[DataMember(Name = "toolCalls")]
		public List<ToolCall> ToolCalls { get; set; } = new List<ToolCall>();

		/// <summary>
		/// Tool call that this message is responding to. Required for a 'tool' role message.
		/// </summary>
		[DataMember(Name = "toolCallId", EmitDefaultValue = true)]
		public string ToolCallId { get; set; }
		
		/// <summary>
		/// Intent id used while creating this message.
		/// </summary>
		public Guid? IntentId { get; set; }

		/// <summary>
		/// Copilot request id used while sending this message.
		/// </summary>
		public Guid? CopilotRequestId { get; set; }

		/// <summary>
		/// Indicates that the instance was saved in storage.
		/// </summary>
		public bool IsSaved { get; set; }

		/// <summary>
		/// Indicates that the instance was sent to clients.
		/// </summary>
		public bool IsSentToClient { get; set; }

		#endregion

		#region Methods: Public

		public static CopilotMessage FromSystem(string content) {
			return new CopilotMessage(content, CopilotMessageRole.System);
		}

		public static CopilotMessage FromUser(string content) {
			return new CopilotMessage(content, CopilotMessageRole.User);
		}
		
		public static CopilotMessage FromAssistant(string content) {
			return new CopilotMessage(content, CopilotMessageRole.Assistant);
		}

		public static CopilotMessage FromAssistant(ToolCall toolCall) {
			return new CopilotMessage(toolCall);
		}

		public static CopilotMessage FromTool(string content, string toolCallId) {
			return new CopilotMessage(content, CopilotMessageRole.Tool, toolCallId);
		}

		public ChatMessage ToCompletionApiMessage() {
			return new ChatMessage(Role, Content, ToolCalls, toolCallId: ToolCallId);
		}

		#endregion

	}

}

